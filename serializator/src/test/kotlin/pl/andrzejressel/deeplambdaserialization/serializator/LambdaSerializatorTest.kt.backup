package pl.andrzejressel.deeplambdaserialization.gradle

import org.apache.commons.lang3.SerializationUtils
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import pl.andrzejressel.deeplambdaserialization.gradle.examples.IntPair
import pl.andrzejressel.deeplambdaserialization.lib.ProguardClassName
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import java.net.URLClassLoader
import java.nio.file.Paths
import java.util.function.Function

class LambdaSerializatorTest {
/*

    private val javaLambda = "pl/andrzejressel/deeplambdaserialization/gradle/examples/JavaLambdas\$1"
    private val kotlinLambda = "pl/andrzejressel/deeplambdaserialization/gradle/examples/KotlinLambdas${'$'}sf\$1"
    private val kotlinLambda2 = "pl/andrzejressel/deeplambdaserialization/gradle/examples/KotlinLambdas${'$'}sf2\$1"

    @Test
    fun shouldGetLambdaNamesFromJava() {

        val ls = createLambdaSerializator()

        assertThat(ls.getClasses())
            .contains(ProguardClassName(javaLambda))
    }

    @Test
    fun shouldGetLambdaNamesFromKotlin() {

        val ls = createLambdaSerializator()

        assertThat(ls.getClasses())
            .contains(ProguardClassName(kotlinLambda), ProguardClassName(kotlinLambda2))
    }

    @Test
    fun shouldMinimizeJavaLambda() {
        val ls = createLambdaSerializator()

        val jar = ls.createJar(ProguardClassName(javaLambda))

        val cl = URLClassLoader("test", arrayOf(jar.toURI().toURL()), LambdaSerializatorTest::class.java.classLoader)

        val parentClz = cl.loadClass("pl.andrzejressel.deeplambdaserialization.gradle.examples.JavaLambdas")
        val lambdaClz = cl.loadClass(javaLambda.replace('/', '.'))

        val constructorMethodType = MethodType.methodType(Void.TYPE, parentClz)
        val constructorMethodHandle = MethodHandles.publicLookup().findConstructor(lambdaClz, constructorMethodType)

        val instance = constructorMethodHandle.invoke(null)

        val methodType = MethodType.methodType(Any::class.java, Array<Any>::class.java)
        val methodHandle = MethodHandles.publicLookup().findVirtual(lambdaClz, "execute", methodType)

        val result = methodHandle.invoke(instance, arrayOf<Any>(1, 2))

        assertThat(result).isEqualTo(3)
    }

    @Test
    fun shouldMinimizeKotlinLambda() {
        val ls = createLambdaSerializator()

        val jar = ls.createJar(kotlinLambda)

        val cl = URLClassLoader("test", arrayOf(jar.toURI().toURL()), ClassLoader.getPlatformClassLoader())

        val lambdaClz = cl.loadClass(kotlinLambda.replace('/', '.'))!!

        val constructor = lambdaClz.getDeclaredConstructor()
        constructor.isAccessible = true

        val instance: Any = constructor.newInstance()

        val methodType = MethodType.methodType(Any::class.java, Array<Any>::class.java)
        val methodHandle = MethodHandles.lookup().findVirtual(lambdaClz, "execute", methodType)

        val result = methodHandle.invoke(instance, arrayOf<Any>(1, 2))

        assertThat(result).isEqualTo(3)
    }

*/
/*
    @Test
    fun test() {
        val card = Card('A', Suit.CLUBS)
        val moshi = Moshi.Builder().build()
        val adapter = moshi.adapter(Card::class.java)
        CardJsonAdapter(moshi)
        BlackjackHandJsonAdapter(moshi)

        println(adapter)
        println(adapter.toJson(card))

    }
*//*


    @Test
    fun shouldMinimizeKotlinLambda2() {
        val ls = createLambdaSerializator()

        val jar = ls.createJar(kotlinLambda2)

        val cl = URLClassLoader("test", arrayOf(jar.toURI().toURL()), ClassLoader.getPlatformClassLoader())

        val lambdaClz = cl.loadClass(kotlinLambda2.replace('/', '.'))!!

        val constructor = lambdaClz.getDeclaredConstructor()
        constructor.isAccessible = true

        val instance: Any = constructor.newInstance()

        val methodType = MethodType.methodType(Any::class.java, Array<Any>::class.java)
        val methodHandle = MethodHandles.lookup().findVirtual(lambdaClz, "execute", methodType)

        val result = methodHandle.invoke(instance, arrayOf<Any>(1, 2)) as ByteArray

        assertThat(SerializationUtils.deserialize(result) as IntPair).isEqualTo(IntPair(1, 2))
    }

    private fun createLambdaSerializator(): LambdaSerializator {
        val javaClzDir = BuildInfo.location.resolve("build/classes/java/test").toAbsolutePath()
        val kotlinClzDir = BuildInfo.location.resolve("build/classes/kotlin/test").toAbsolutePath()

        val classPath = System.getProperty("java.class.path").split(';').map { Paths.get(it) }.toSet()
            .filterNot { it.toString().contains("groovy") }
            .filterNot { it.toString().contains("gradle-worker.jar") }
            .filterNot { it.last().toString().contains("gradle") }
            .filterNot { it.toString().contains("bytebuddy") }
            .filterNot { it.toString().contains("log4j") }
            .filterNot { it.toString().contains("wrapper") }

        assertThat(classPath).contains(javaClzDir, kotlinClzDir)

        val applicationClassPath = setOf(javaClzDir, kotlinClzDir)
        val libraryClassPath = classPath - applicationClassPath

        return LambdaSerializator(
            libraryClassPath.toList(),
            applicationClassPath.toList(),
            Paths.get("build", "lambda_serializator_test")
        )
    }
*/

}